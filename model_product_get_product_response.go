/*
Product Service

API for managing products

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package product

import (
	"encoding/json"
)

// checks if the ProductGetProductResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductGetProductResponse{}

// ProductGetProductResponse struct for ProductGetProductResponse
type ProductGetProductResponse struct {
	Product *ProductProductEntity `json:"product,omitempty"`
}

// NewProductGetProductResponse instantiates a new ProductGetProductResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductGetProductResponse() *ProductGetProductResponse {
	this := ProductGetProductResponse{}
	return &this
}

// NewProductGetProductResponseWithDefaults instantiates a new ProductGetProductResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductGetProductResponseWithDefaults() *ProductGetProductResponse {
	this := ProductGetProductResponse{}
	return &this
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *ProductGetProductResponse) GetProduct() ProductProductEntity {
	if o == nil || IsNil(o.Product) {
		var ret ProductProductEntity
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductGetProductResponse) GetProductOk() (*ProductProductEntity, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *ProductGetProductResponse) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given ProductProductEntity and assigns it to the Product field.
func (o *ProductGetProductResponse) SetProduct(v ProductProductEntity) {
	o.Product = &v
}

func (o ProductGetProductResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductGetProductResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	return toSerialize, nil
}

type NullableProductGetProductResponse struct {
	value *ProductGetProductResponse
	isSet bool
}

func (v NullableProductGetProductResponse) Get() *ProductGetProductResponse {
	return v.value
}

func (v *NullableProductGetProductResponse) Set(val *ProductGetProductResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProductGetProductResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProductGetProductResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductGetProductResponse(val *ProductGetProductResponse) *NullableProductGetProductResponse {
	return &NullableProductGetProductResponse{value: val, isSet: true}
}

func (v NullableProductGetProductResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductGetProductResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



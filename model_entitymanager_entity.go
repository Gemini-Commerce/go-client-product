/*
Product Service

API for managing products

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package product

import (
	"encoding/json"
)

// checks if the EntitymanagerEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntitymanagerEntity{}

// EntitymanagerEntity struct for EntitymanagerEntity
type EntitymanagerEntity struct {
	TenantId *string `json:"tenantId,omitempty"`
	Id *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Code *string `json:"code,omitempty"`
	ParentCode *string `json:"parentCode,omitempty"`
	Label *string `json:"label,omitempty"`
	Relationships []string `json:"relationships,omitempty"`
	Attributes []EntitymanagerAttribute `json:"attributes,omitempty"`
}

// NewEntitymanagerEntity instantiates a new EntitymanagerEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitymanagerEntity() *EntitymanagerEntity {
	this := EntitymanagerEntity{}
	return &this
}

// NewEntitymanagerEntityWithDefaults instantiates a new EntitymanagerEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitymanagerEntityWithDefaults() *EntitymanagerEntity {
	this := EntitymanagerEntity{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *EntitymanagerEntity) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitymanagerEntity) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *EntitymanagerEntity) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *EntitymanagerEntity) SetTenantId(v string) {
	o.TenantId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EntitymanagerEntity) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitymanagerEntity) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EntitymanagerEntity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EntitymanagerEntity) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EntitymanagerEntity) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitymanagerEntity) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EntitymanagerEntity) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EntitymanagerEntity) SetType(v string) {
	o.Type = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *EntitymanagerEntity) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitymanagerEntity) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *EntitymanagerEntity) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *EntitymanagerEntity) SetCode(v string) {
	o.Code = &v
}

// GetParentCode returns the ParentCode field value if set, zero value otherwise.
func (o *EntitymanagerEntity) GetParentCode() string {
	if o == nil || IsNil(o.ParentCode) {
		var ret string
		return ret
	}
	return *o.ParentCode
}

// GetParentCodeOk returns a tuple with the ParentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitymanagerEntity) GetParentCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ParentCode) {
		return nil, false
	}
	return o.ParentCode, true
}

// HasParentCode returns a boolean if a field has been set.
func (o *EntitymanagerEntity) HasParentCode() bool {
	if o != nil && !IsNil(o.ParentCode) {
		return true
	}

	return false
}

// SetParentCode gets a reference to the given string and assigns it to the ParentCode field.
func (o *EntitymanagerEntity) SetParentCode(v string) {
	o.ParentCode = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *EntitymanagerEntity) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitymanagerEntity) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *EntitymanagerEntity) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *EntitymanagerEntity) SetLabel(v string) {
	o.Label = &v
}

// GetRelationships returns the Relationships field value if set, zero value otherwise.
func (o *EntitymanagerEntity) GetRelationships() []string {
	if o == nil || IsNil(o.Relationships) {
		var ret []string
		return ret
	}
	return o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitymanagerEntity) GetRelationshipsOk() ([]string, bool) {
	if o == nil || IsNil(o.Relationships) {
		return nil, false
	}
	return o.Relationships, true
}

// HasRelationships returns a boolean if a field has been set.
func (o *EntitymanagerEntity) HasRelationships() bool {
	if o != nil && !IsNil(o.Relationships) {
		return true
	}

	return false
}

// SetRelationships gets a reference to the given []string and assigns it to the Relationships field.
func (o *EntitymanagerEntity) SetRelationships(v []string) {
	o.Relationships = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *EntitymanagerEntity) GetAttributes() []EntitymanagerAttribute {
	if o == nil || IsNil(o.Attributes) {
		var ret []EntitymanagerAttribute
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitymanagerEntity) GetAttributesOk() ([]EntitymanagerAttribute, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *EntitymanagerEntity) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []EntitymanagerAttribute and assigns it to the Attributes field.
func (o *EntitymanagerEntity) SetAttributes(v []EntitymanagerAttribute) {
	o.Attributes = v
}

func (o EntitymanagerEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntitymanagerEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.ParentCode) {
		toSerialize["parentCode"] = o.ParentCode
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Relationships) {
		toSerialize["relationships"] = o.Relationships
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

type NullableEntitymanagerEntity struct {
	value *EntitymanagerEntity
	isSet bool
}

func (v NullableEntitymanagerEntity) Get() *EntitymanagerEntity {
	return v.value
}

func (v *NullableEntitymanagerEntity) Set(val *EntitymanagerEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitymanagerEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitymanagerEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitymanagerEntity(val *EntitymanagerEntity) *NullableEntitymanagerEntity {
	return &NullableEntitymanagerEntity{value: val, isSet: true}
}

func (v NullableEntitymanagerEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitymanagerEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



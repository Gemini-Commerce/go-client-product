/*
product/product.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package product

import (
	"encoding/json"
	"fmt"
)

// EntitymanagerTypes the model 'EntitymanagerTypes'
type EntitymanagerTypes string

// List of entitymanagerTypes
const (
	TEXT     EntitymanagerTypes = "TEXT"
	NUMBER   EntitymanagerTypes = "NUMBER"
	BOOLEAN  EntitymanagerTypes = "BOOLEAN"
	DATETIME EntitymanagerTypes = "DATETIME"
	EXTERNAL EntitymanagerTypes = "EXTERNAL"
	EMBED    EntitymanagerTypes = "EMBED"
	FLOAT32  EntitymanagerTypes = "FLOAT32"
)

// All allowed values of EntitymanagerTypes enum
var AllowedEntitymanagerTypesEnumValues = []EntitymanagerTypes{
	"TEXT",
	"NUMBER",
	"BOOLEAN",
	"DATETIME",
	"EXTERNAL",
	"EMBED",
	"FLOAT32",
}

func (v *EntitymanagerTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntitymanagerTypes(value)
	for _, existing := range AllowedEntitymanagerTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntitymanagerTypes", value)
}

// NewEntitymanagerTypesFromValue returns a pointer to a valid EntitymanagerTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntitymanagerTypesFromValue(v string) (*EntitymanagerTypes, error) {
	ev := EntitymanagerTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntitymanagerTypes: valid values are %v", v, AllowedEntitymanagerTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntitymanagerTypes) IsValid() bool {
	for _, existing := range AllowedEntitymanagerTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to entitymanagerTypes value
func (v EntitymanagerTypes) Ptr() *EntitymanagerTypes {
	return &v
}

type NullableEntitymanagerTypes struct {
	value *EntitymanagerTypes
	isSet bool
}

func (v NullableEntitymanagerTypes) Get() *EntitymanagerTypes {
	return v.value
}

func (v *NullableEntitymanagerTypes) Set(val *EntitymanagerTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitymanagerTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitymanagerTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitymanagerTypes(val *EntitymanagerTypes) *NullableEntitymanagerTypes {
	return &NullableEntitymanagerTypes{value: val, isSet: true}
}

func (v NullableEntitymanagerTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitymanagerTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

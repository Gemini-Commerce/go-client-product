/*
Product Service

API for managing products

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package product

import (
	"encoding/json"
	"fmt"
)

// EntitymanagerRenderAs the model 'EntitymanagerRenderAs'
type EntitymanagerRenderAs string

// List of entitymanagerRenderAs
const (
	ENTITYMANAGERRENDERAS_DEFAULT EntitymanagerRenderAs = "DEFAULT"
	ENTITYMANAGERRENDERAS_WYSIWYG EntitymanagerRenderAs = "WYSIWYG"
)

// All allowed values of EntitymanagerRenderAs enum
var AllowedEntitymanagerRenderAsEnumValues = []EntitymanagerRenderAs{
	"DEFAULT",
	"WYSIWYG",
}

func (v *EntitymanagerRenderAs) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntitymanagerRenderAs(value)
	for _, existing := range AllowedEntitymanagerRenderAsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntitymanagerRenderAs", value)
}

// NewEntitymanagerRenderAsFromValue returns a pointer to a valid EntitymanagerRenderAs
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntitymanagerRenderAsFromValue(v string) (*EntitymanagerRenderAs, error) {
	ev := EntitymanagerRenderAs(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntitymanagerRenderAs: valid values are %v", v, AllowedEntitymanagerRenderAsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntitymanagerRenderAs) IsValid() bool {
	for _, existing := range AllowedEntitymanagerRenderAsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to entitymanagerRenderAs value
func (v EntitymanagerRenderAs) Ptr() *EntitymanagerRenderAs {
	return &v
}

type NullableEntitymanagerRenderAs struct {
	value *EntitymanagerRenderAs
	isSet bool
}

func (v NullableEntitymanagerRenderAs) Get() *EntitymanagerRenderAs {
	return v.value
}

func (v *NullableEntitymanagerRenderAs) Set(val *EntitymanagerRenderAs) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitymanagerRenderAs) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitymanagerRenderAs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitymanagerRenderAs(val *EntitymanagerRenderAs) *NullableEntitymanagerRenderAs {
	return &NullableEntitymanagerRenderAs{value: val, isSet: true}
}

func (v NullableEntitymanagerRenderAs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitymanagerRenderAs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


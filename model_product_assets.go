/*
Product Service

API for managing products

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package product

import (
	"encoding/json"
)

// checks if the ProductAssets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductAssets{}

// ProductAssets struct for ProductAssets
type ProductAssets struct {
	Entries []ProductAssetsEntry `json:"entries,omitempty"`
}

// NewProductAssets instantiates a new ProductAssets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductAssets() *ProductAssets {
	this := ProductAssets{}
	return &this
}

// NewProductAssetsWithDefaults instantiates a new ProductAssets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductAssetsWithDefaults() *ProductAssets {
	this := ProductAssets{}
	return &this
}

// GetEntries returns the Entries field value if set, zero value otherwise.
func (o *ProductAssets) GetEntries() []ProductAssetsEntry {
	if o == nil || IsNil(o.Entries) {
		var ret []ProductAssetsEntry
		return ret
	}
	return o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAssets) GetEntriesOk() ([]ProductAssetsEntry, bool) {
	if o == nil || IsNil(o.Entries) {
		return nil, false
	}
	return o.Entries, true
}

// HasEntries returns a boolean if a field has been set.
func (o *ProductAssets) HasEntries() bool {
	if o != nil && !IsNil(o.Entries) {
		return true
	}

	return false
}

// SetEntries gets a reference to the given []ProductAssetsEntry and assigns it to the Entries field.
func (o *ProductAssets) SetEntries(v []ProductAssetsEntry) {
	o.Entries = v
}

func (o ProductAssets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductAssets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entries) {
		toSerialize["entries"] = o.Entries
	}
	return toSerialize, nil
}

type NullableProductAssets struct {
	value *ProductAssets
	isSet bool
}

func (v NullableProductAssets) Get() *ProductAssets {
	return v.value
}

func (v *NullableProductAssets) Set(val *ProductAssets) {
	v.value = val
	v.isSet = true
}

func (v NullableProductAssets) IsSet() bool {
	return v.isSet
}

func (v *NullableProductAssets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductAssets(val *ProductAssets) *NullableProductAssets {
	return &NullableProductAssets{value: val, isSet: true}
}

func (v NullableProductAssets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductAssets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



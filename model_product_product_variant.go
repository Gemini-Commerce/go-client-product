/*
product/product.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package product

import (
	"encoding/json"
)

// ProductProductVariant struct for ProductProductVariant
type ProductProductVariant struct {
	Id *string `json:"id,omitempty"`
	Attributes *map[string]ProtobufAny `json:"attributes,omitempty"`
}

// NewProductProductVariant instantiates a new ProductProductVariant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductProductVariant() *ProductProductVariant {
	this := ProductProductVariant{}
	return &this
}

// NewProductProductVariantWithDefaults instantiates a new ProductProductVariant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductProductVariantWithDefaults() *ProductProductVariant {
	this := ProductProductVariant{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProductProductVariant) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductProductVariant) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProductProductVariant) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProductProductVariant) SetId(v string) {
	o.Id = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ProductProductVariant) GetAttributes() map[string]ProtobufAny {
	if o == nil || isNil(o.Attributes) {
		var ret map[string]ProtobufAny
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductProductVariant) GetAttributesOk() (*map[string]ProtobufAny, bool) {
	if o == nil || isNil(o.Attributes) {
    return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ProductProductVariant) HasAttributes() bool {
	if o != nil && !isNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]ProtobufAny and assigns it to the Attributes field.
func (o *ProductProductVariant) SetAttributes(v map[string]ProtobufAny) {
	o.Attributes = &v
}

func (o ProductProductVariant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableProductProductVariant struct {
	value *ProductProductVariant
	isSet bool
}

func (v NullableProductProductVariant) Get() *ProductProductVariant {
	return v.value
}

func (v *NullableProductProductVariant) Set(val *ProductProductVariant) {
	v.value = val
	v.isSet = true
}

func (v NullableProductProductVariant) IsSet() bool {
	return v.isSet
}

func (v *NullableProductProductVariant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductProductVariant(val *ProductProductVariant) *NullableProductProductVariant {
	return &NullableProductProductVariant{value: val, isSet: true}
}

func (v NullableProductProductVariant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductProductVariant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


